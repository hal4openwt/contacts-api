/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package fr.hildenbrand.contactapi.api;

import fr.hildenbrand.contactapi.model.Contact;
import fr.hildenbrand.contactapi.model.ContactBody;
import fr.hildenbrand.contactapi.model.Skill;
import fr.hildenbrand.contactapi.model.SkillBody;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-01-08T12:44:06.373+01:00")

@Api(value = "contacts", description = "the contacts API")
public interface ContactsApi {

    @ApiOperation(value = "Add a contact", nickname = "addContact", notes = "", tags={ "contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/contacts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addContact(@ApiParam(value = "Contact object that needs to be added" ,required=true )  @Valid @RequestBody ContactBody body);


    @ApiOperation(value = "Adds a skill to a contact", nickname = "addSkillToContact", notes = "", tags={ "contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Skill added to contact"),
        @ApiResponse(code = 422, message = "Skill ID not found") })
    @RequestMapping(value = "/contacts/{contactId}/addSkill",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addSkillToContact(@ApiParam(value = "ID of contact to update",required=true) @PathVariable("contactId") Long contactId,@ApiParam(value = "ID of skill to add" ,required=true )  @Valid @RequestBody Skill skills);


    @ApiOperation(value = "Deletes a contact", nickname = "deleteContact", notes = "", tags={ "contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Contact not found") })
    @RequestMapping(value = "/contacts/{contactId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteContact(@ApiParam(value = "Contact id to delete",required=true) @PathVariable("contactId") Long contactId);


    @ApiOperation(value = "Find contact by ID", nickname = "getContactById", notes = "Returns a single contact", response = Contact.class, tags={ "contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Contact.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Contact not found") })
    @RequestMapping(value = "/contacts/{contactId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Contact> getContactById(@ApiParam(value = "ID of contact to return",required=true) @PathVariable("contactId") Long contactId);


    @ApiOperation(value = "List contacts", nickname = "listContacts", notes = "", response = Contact.class, responseContainer = "List", tags={ "contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Contact.class, responseContainer = "List") })
    @RequestMapping(value = "/contacts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Contact>> listContacts();


    @ApiOperation(value = "Update an existing contact", nickname = "updateContact", notes = "", tags={ "contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Contact not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/contacts/{contactId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateContact(@ApiParam(value = "ID of contact to return",required=true) @PathVariable("contactId") Long contactId,@ApiParam(value = "Contact object that needs to be updated" ,required=true )  @Valid @RequestBody ContactBody body);

}
